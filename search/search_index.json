{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"P\u00e1gina inicial","text":""},{"location":"#objetivo","title":"Objetivo","text":"<p>O principal objetivo do projeto \u00e9 realizar a extra\u00e7\u00e3o das Odds da partida do site Betano.com e depois salvar em um banco de dados MongoDB.</p>"},{"location":"#fluxo","title":"Fluxo","text":"<pre><code>graph TD;\n    A[In\u00edcio] --&gt; B[Instanciar Navegador];\n    B --&gt; D[Obter HTML da URL passada];\n    D --&gt; E[Procurar por uma palavra chave dentro do HTML]\n    E --&gt; F[Selecionar se\u00e7\u00e3o principal]\n    F --&gt; G[Extrair jogos]\n    G --&gt; H[Converter para JSON]\n    H --&gt; J[Conectar e Escrever no MongoDB]\n    J --&gt; K[Fim]\n\n</code></pre>"},{"location":"BetanoBrowser/","title":"Classe: BetanoBrowser","text":"<p>Essa \u00e9 a classe principal do projeto, onde realizamos a extra\u00e7\u00e3o das informa\u00e7\u00f5es do site, realiza tratamento dos dados para no fim chegar a lista de JSON principal que ser\u00e1 armazenada no banco de dados.</p>"},{"location":"BetanoBrowser/#metodos-da-classe","title":"M\u00e9todos da Classe","text":"Source code in <code>betCrawler\\Browser\\betanoCr.py</code> <pre><code>class BetanoBrowser:\n    def __init__(self):\n        self.driver = Driver(uc=True)\n\n\n    def open_url(self, url):\n        \"\"\"\n        Abre uma URL no navegador.\n        \"\"\"\n        self.driver.open(url)\n\n    def get_html_from_url(self, query=\"*\"):\n        \"\"\"\n        Obt\u00e9m o HTML da p\u00e1gina e retorna as informa\u00e7\u00f5es relevantes em um DataFrame.\n        \"\"\"\n        df = pd.DataFrame()\n        while df.empty:\n            df = get_df(\n                self.driver,\n                By,\n                WebDriverWait,\n                expected_conditions,\n                queryselector=query,\n                with_methods=True,\n            )\n        return df\n\n    def search_text(self, text, df):\n        \"\"\"\n        Procura por um texto espec\u00edfico na coluna 'aa_innerText' do DataFrame e retorna as linhas correspondentes.\n        \"\"\"\n        df_result = df[df['aa_innerText'].str.contains(text, regex=False, na=False) &amp; (df['aa_tagName'] != 'DIV')]\n        df_result = df_result[['aa_tagName', 'aa_innerText', 'aa_className']]\n        return df_result\n\n    def select_by_text(self, df, text):\n        \"\"\"\n        Seleciona linhas do DataFrame com base no texto fornecido na coluna 'aa_className'.\n        \"\"\"\n        text = df.loc[df.aa_className.str.contains(text, regex=False, na=False)].aa_innerText.iloc[0]\n        df_filter = pd.DataFrame(text.splitlines())\n        return df_filter\n\n    def extract_games(self, df, start, end, regex_pattern):\n        \"\"\"\n        Extrai os jogos do DataFrame com base nos padr\u00f5es de in\u00edcio e fim fornecidos.\n        \"\"\"\n        index_inicial = None\n        index_final = None\n\n        # Verifica se start e end n\u00e3o s\u00e3o None e atualiza os \u00edndices iniciais e finais\n        if start:\n            index_inicial = df.loc[df[0].str.contains(start, na=False, regex=False)].index[-1] + 1\n        if end:\n            index_final = df.loc[df[0].str.contains(end, na=False, regex=False)].index[-1]\n\n        # Extrai os jogos com base nos \u00edndices iniciais e finais atualizados\n        if index_inicial is not None and index_final is not None:\n            df = df.iloc[index_inicial:index_final].reset_index(drop=True)\n        elif index_inicial is not None:\n            df = df.iloc[index_inicial:].reset_index(drop=True)\n        elif index_final is not None:\n            df = df.iloc[:index_final].reset_index(drop=True)\n\n\n\n        df[0] = df[0].str.strip()\n\n        indexes_data = df.loc[df[0].str.contains(regex_pattern, regex=True, na=False)].index\n        allbets = [df.iloc[indexes_data[i]:indexes_data[i+1]] for i in range(len(indexes_data)-1)]\n        df_append = df.iloc[indexes_data[-1]:].reset_index(drop=True)\n        allbets.append(df_append)\n        return allbets\n\n    def dataframe_to_json(self, dfs):\n        \"\"\"\n        Converte os DataFrames de jogos em uma lista de dicion\u00e1rios JSON.\n        \"\"\"\n        colunas = {\n            0: 'data',\n            1: 'hora',\n            2: 'mandante',\n            3: 'visitante',\n            5: 'odd_home',\n            7: 'odd_draw',\n            9: 'odd_away'\n        }\n\n        json_list = []\n\n        for jogo in range(len(dfs)):\n            json_data = {}\n\n            for i, k in colunas.items():\n                valor = dfs[jogo].iloc[i].values[0]\n                json_data[k] = valor\n\n            json_list.append(json_data)\n\n        return json_list\n</code></pre>"},{"location":"BetanoBrowser/#betCrawler.Browser.betanoCr.BetanoBrowser.dataframe_to_json","title":"<code>dataframe_to_json(dfs)</code>","text":"<p>Converte os DataFrames de jogos em uma lista de dicion\u00e1rios JSON.</p> Source code in <code>betCrawler\\Browser\\betanoCr.py</code> <pre><code>def dataframe_to_json(self, dfs):\n    \"\"\"\n    Converte os DataFrames de jogos em uma lista de dicion\u00e1rios JSON.\n    \"\"\"\n    colunas = {\n        0: 'data',\n        1: 'hora',\n        2: 'mandante',\n        3: 'visitante',\n        5: 'odd_home',\n        7: 'odd_draw',\n        9: 'odd_away'\n    }\n\n    json_list = []\n\n    for jogo in range(len(dfs)):\n        json_data = {}\n\n        for i, k in colunas.items():\n            valor = dfs[jogo].iloc[i].values[0]\n            json_data[k] = valor\n\n        json_list.append(json_data)\n\n    return json_list\n</code></pre>"},{"location":"BetanoBrowser/#betCrawler.Browser.betanoCr.BetanoBrowser.extract_games","title":"<code>extract_games(df, start, end, regex_pattern)</code>","text":"<p>Extrai os jogos do DataFrame com base nos padr\u00f5es de in\u00edcio e fim fornecidos.</p> Source code in <code>betCrawler\\Browser\\betanoCr.py</code> <pre><code>def extract_games(self, df, start, end, regex_pattern):\n    \"\"\"\n    Extrai os jogos do DataFrame com base nos padr\u00f5es de in\u00edcio e fim fornecidos.\n    \"\"\"\n    index_inicial = None\n    index_final = None\n\n    # Verifica se start e end n\u00e3o s\u00e3o None e atualiza os \u00edndices iniciais e finais\n    if start:\n        index_inicial = df.loc[df[0].str.contains(start, na=False, regex=False)].index[-1] + 1\n    if end:\n        index_final = df.loc[df[0].str.contains(end, na=False, regex=False)].index[-1]\n\n    # Extrai os jogos com base nos \u00edndices iniciais e finais atualizados\n    if index_inicial is not None and index_final is not None:\n        df = df.iloc[index_inicial:index_final].reset_index(drop=True)\n    elif index_inicial is not None:\n        df = df.iloc[index_inicial:].reset_index(drop=True)\n    elif index_final is not None:\n        df = df.iloc[:index_final].reset_index(drop=True)\n\n\n\n    df[0] = df[0].str.strip()\n\n    indexes_data = df.loc[df[0].str.contains(regex_pattern, regex=True, na=False)].index\n    allbets = [df.iloc[indexes_data[i]:indexes_data[i+1]] for i in range(len(indexes_data)-1)]\n    df_append = df.iloc[indexes_data[-1]:].reset_index(drop=True)\n    allbets.append(df_append)\n    return allbets\n</code></pre>"},{"location":"BetanoBrowser/#betCrawler.Browser.betanoCr.BetanoBrowser.get_html_from_url","title":"<code>get_html_from_url(query='*')</code>","text":"<p>Obt\u00e9m o HTML da p\u00e1gina e retorna as informa\u00e7\u00f5es relevantes em um DataFrame.</p> Source code in <code>betCrawler\\Browser\\betanoCr.py</code> <pre><code>def get_html_from_url(self, query=\"*\"):\n    \"\"\"\n    Obt\u00e9m o HTML da p\u00e1gina e retorna as informa\u00e7\u00f5es relevantes em um DataFrame.\n    \"\"\"\n    df = pd.DataFrame()\n    while df.empty:\n        df = get_df(\n            self.driver,\n            By,\n            WebDriverWait,\n            expected_conditions,\n            queryselector=query,\n            with_methods=True,\n        )\n    return df\n</code></pre>"},{"location":"BetanoBrowser/#betCrawler.Browser.betanoCr.BetanoBrowser.open_url","title":"<code>open_url(url)</code>","text":"<p>Abre uma URL no navegador.</p> Source code in <code>betCrawler\\Browser\\betanoCr.py</code> <pre><code>def open_url(self, url):\n    \"\"\"\n    Abre uma URL no navegador.\n    \"\"\"\n    self.driver.open(url)\n</code></pre>"},{"location":"BetanoBrowser/#betCrawler.Browser.betanoCr.BetanoBrowser.search_text","title":"<code>search_text(text, df)</code>","text":"<p>Procura por um texto espec\u00edfico na coluna 'aa_innerText' do DataFrame e retorna as linhas correspondentes.</p> Source code in <code>betCrawler\\Browser\\betanoCr.py</code> <pre><code>def search_text(self, text, df):\n    \"\"\"\n    Procura por um texto espec\u00edfico na coluna 'aa_innerText' do DataFrame e retorna as linhas correspondentes.\n    \"\"\"\n    df_result = df[df['aa_innerText'].str.contains(text, regex=False, na=False) &amp; (df['aa_tagName'] != 'DIV')]\n    df_result = df_result[['aa_tagName', 'aa_innerText', 'aa_className']]\n    return df_result\n</code></pre>"},{"location":"BetanoBrowser/#betCrawler.Browser.betanoCr.BetanoBrowser.select_by_text","title":"<code>select_by_text(df, text)</code>","text":"<p>Seleciona linhas do DataFrame com base no texto fornecido na coluna 'aa_className'.</p> Source code in <code>betCrawler\\Browser\\betanoCr.py</code> <pre><code>def select_by_text(self, df, text):\n    \"\"\"\n    Seleciona linhas do DataFrame com base no texto fornecido na coluna 'aa_className'.\n    \"\"\"\n    text = df.loc[df.aa_className.str.contains(text, regex=False, na=False)].aa_innerText.iloc[0]\n    df_filter = pd.DataFrame(text.splitlines())\n    return df_filter\n</code></pre>"},{"location":"MongoClass/","title":"Classe: MongoConnection","text":"<p>Essa \u00e9 a classe criada para conectar e salvar informa\u00e7\u00f5es no banco  de dados MongoDB.</p>"},{"location":"MongoClass/#metodos-da-classe","title":"M\u00e9todos da Classe","text":"Source code in <code>betCrawler\\saveDatabase\\mongoCr.py</code> <pre><code>class MongoConnection:\n    def __init__(self):\n        \"\"\"\n        Classe para gerenciar a conex\u00e3o com o MongoDB e opera\u00e7\u00f5es de escrita.\n\n        Carrega as vari\u00e1veis de ambiente do arquivo .env para estabelecer a conex\u00e3o com o MongoDB.\n        \"\"\"\n        load_dotenv()\n        mongo_user = os.getenv(\"MONGODB_USER\")\n        mongo_password = os.getenv(\"MONGODB_PASSWORD\")  \n        mongo_host = os.getenv(\"MONGODB_HOST\") \n        mongo_port = os.getenv(\"MONGODB_PORT\") \n\n\n        self.URI = f\"mongodb://{mongo_user}:{mongo_password}@{mongo_host}:{mongo_port}\"\n        self.client = MongoClient(self.URI)\n        self.db = self.client['bet']\n        self.collection = self.db['betc']\n\n    def write_mongo_db(self, text):\n        \"\"\"\n        Insere um documento na cole\u00e7\u00e3o 'betc' do MongoDB.\n\n        Args:\n            text (dict): O documento a ser inserido na cole\u00e7\u00e3o.\n        \"\"\"\n        try:\n            self.collection.insert_one(text)\n            print('Documento inserido no MongoDB com sucesso')\n        except Exception as e:\n            print(f'Erro ao inserir documento no MongoDB: {str(e)}')\n</code></pre>"},{"location":"MongoClass/#betCrawler.saveDatabase.mongoCr.MongoConnection.__init__","title":"<code>__init__()</code>","text":"<p>Classe para gerenciar a conex\u00e3o com o MongoDB e opera\u00e7\u00f5es de escrita.</p> <p>Carrega as vari\u00e1veis de ambiente do arquivo .env para estabelecer a conex\u00e3o com o MongoDB.</p> Source code in <code>betCrawler\\saveDatabase\\mongoCr.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Classe para gerenciar a conex\u00e3o com o MongoDB e opera\u00e7\u00f5es de escrita.\n\n    Carrega as vari\u00e1veis de ambiente do arquivo .env para estabelecer a conex\u00e3o com o MongoDB.\n    \"\"\"\n    load_dotenv()\n    mongo_user = os.getenv(\"MONGODB_USER\")\n    mongo_password = os.getenv(\"MONGODB_PASSWORD\")  \n    mongo_host = os.getenv(\"MONGODB_HOST\") \n    mongo_port = os.getenv(\"MONGODB_PORT\") \n\n\n    self.URI = f\"mongodb://{mongo_user}:{mongo_password}@{mongo_host}:{mongo_port}\"\n    self.client = MongoClient(self.URI)\n    self.db = self.client['bet']\n    self.collection = self.db['betc']\n</code></pre>"},{"location":"MongoClass/#betCrawler.saveDatabase.mongoCr.MongoConnection.write_mongo_db","title":"<code>write_mongo_db(text)</code>","text":"<p>Insere um documento na cole\u00e7\u00e3o 'betc' do MongoDB.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>dict</code> <p>O documento a ser inserido na cole\u00e7\u00e3o.</p> required Source code in <code>betCrawler\\saveDatabase\\mongoCr.py</code> <pre><code>def write_mongo_db(self, text):\n    \"\"\"\n    Insere um documento na cole\u00e7\u00e3o 'betc' do MongoDB.\n\n    Args:\n        text (dict): O documento a ser inserido na cole\u00e7\u00e3o.\n    \"\"\"\n    try:\n        self.collection.insert_one(text)\n        print('Documento inserido no MongoDB com sucesso')\n    except Exception as e:\n        print(f'Erro ao inserir documento no MongoDB: {str(e)}')\n</code></pre>"}]}